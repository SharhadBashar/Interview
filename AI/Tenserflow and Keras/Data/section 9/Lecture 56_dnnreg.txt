##### DNN Regression

import pandas as pd
import numpy as np

import tensorflow as tf

from sklearn import cross_validation
from sklearn import metrics
from sklearn import preprocessing

from sklearn.datasets import load_boston
boston = load_boston()
print( "type of boston = ", type(boston))

print( boston.feature_names )

bostonDF = pd.DataFrame( boston.data )#convert data to data frame
bostonDF.head()

bostonDF.columns = boston.feature_names
bostonDF.head()

X = bostonDF #predictors
y = boston.target #response
print( "shape of X = ", X.shape, " shape of y = ", y.shape )


from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.75, random_state=101)#75% training


##scale the data
scaler = preprocessing.StandardScaler( )
X_train = scaler.fit_transform( X_train )
X_train

from tensorflow.contrib import learn

# Build a 3 layer fully connected DNN
feature_columns = boston.feature_names
regressor = learn.DNNRegressor(feature_columns=None,hidden_units=[10, 20, 10])

regressor.fit(X_train, y_train, steps=5000, batch_size=1)

