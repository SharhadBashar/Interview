

import numpy as np
import pandas as pd
from keras.models import Sequential
from keras.layers import Dense
from keras.wrappers.scikit_learn import KerasClassifier
from keras.utils import np_utils
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold
from sklearn.preprocessing import LabelEncoder
from sklearn.pipeline import Pipeline

# load dataset
df = pd.read_csv("iris1.csv", header=None)

dataset = df.values
X = dataset[:,0:4].astype(float)#predictors
Y = dataset[:,4] #response

# encode class values as integers
encoder = LabelEncoder()
encoder.fit(Y)
encoded_Y = encoder.transform(Y)
# convert integers to dummy variables (i.e. one hot encoded)
dummy_y = np_utils.to_categorical(encoded_Y)

### 4 inputs -> [8 hidden nodes] -> 3 outputs

# define baseline model
def baseline_model():
# create model
    model = Sequential()
    model.add(Dense(8, input_dim=4, activation='relu')) ##8 hidden nodes
    model.add(Dense(3, activation='softmax')) ##3 outputs. Specify softmax for output activation
# Compile model
    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
    return model

estimator = KerasClassifier(build_fn=baseline_model, epochs=200, batch_size=5, verbose=0)

kfold = KFold(n_splits=10, shuffle=True, random_state=5)

results = cross_val_score(estimator, X, dummy_y, cv=kfold)
print("Baseline: %.2f%% (%.2f%%)" % (results.mean()*100, results.std()*100))