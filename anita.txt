This document is for use as a “whiteboard” (for coding, brainstorming, etc.) during Sharhad’s interview with Raymond on Feb 23, 2022 @ 1 pm Eastern time.

# Same Tree

class TreeNode:
  """Class representing a node in a tree.

  Attributes:
      val (int): Value held by this node.
      left (TreeNode or None): The left child of this node.
      right (TreeNode or None): The right child of this node.
  """

  def __init__(self, val, left, right):
      self.val = val
      self.left = left
      self.right = right

#########
# Problem

# Write a function same_tree where, given two TreeNodes that are the roots of
# their respective trees, determines whether the trees are identical. Two trees
# are considered the same if:
# (1) They are structurally identical.
# (2) Each node in one tree has the same value as its counterpart in the other.















###########
# Example 0

A_left = TreeNode(val=3, left=None, right=None)
A_right = TreeNode(val=8, left=None, right=None)
A = TreeNode(val=9, left=A_left, right=A_right)

B_left = TreeNode(val=3, left=None, right=None)
B_right = TreeNode(val=8, left=None, right=None)
B = TreeNode(val=9, left=B_left, right=B_right)

#    9     9
# / \   / \
#   3   8 3   8

same_tree(A, B)
# >>> True

###########
# Example 1

A_left = TreeNode(val=3, left=None, right=None)
A = TreeNode(val=5, left=A_left, right=None)

B_right = TreeNode(val=3, left=None, right=None)
B = TreeNode(val=5, left=None, right=B_right)


#    5        5
# /       \
#   3          3

same_tree(A, B)
# >>> False











###########
# Example 2

A_left = TreeNode(val=8, left=None, right=None)
A_right = TreeNode(val=3, left=None, right=None)
A = TreeNode(val=9, left=A_left, right=A_right)

B_left = TreeNode(val=3, left=None, right=None)
B_right = TreeNode(val=8, left=None, right=None)
B = TreeNode(val=9, left=B_left, right=B_right)

#    9       9
# / \     / \
#   8   3   3   8

same_tree(A, B)
# >>> False

###########
# Example 3

A = TreeNode(val=9, left=None, right=None)
B = TreeNode(val=9, left=None, right=None)

#   9     9

same_tree(A, B)
# >>> True

A = TreeNode(val=1, left=None, right=None)

#   1     9

same_tree(A, B)
# >>> False

Answer:

class TreeNode:
  """Class representing a node in a tree.

  Attributes:
      val (int): Value held by this node.
      left (TreeNode or None): The left child of this node.
      right (TreeNode or None): The right child of this node.
  """

  def __init__(self, val, left, right):
      self.val = val
      self.left = left
      self.right = right

def identical(a, b):
    if a is None and b is None: return True
    if a is not None and b is not None:
        return ((a.val == b.val) and
                identical(a.left, b.left) and 
                identical(a.right, b.right)
                )
    return False  





Image 2 parallel arrays
A = [a, b, c]
B = [1, 2, 3]
Rand = [0, 1)
Def weighted_sample(a, b):
Buckets = [0, ⅙, ]

[⅙, ⅙ + 2/6, ⅙ + 2/6 + 3/6]

Rand_return = 0.23


    b.sort()
    Prob_arr = [0] * len(b)
    Sum_b = sum(b)
    For i in b:
        Prob_arr[i] = b[i]/ sum(b)
    # [0.167, 0.3333, 0.5]
    Rand_num = Rand() -> 0.34
    Idx = nearest(prob_arr, Rand_num)
    return(a[idx])

