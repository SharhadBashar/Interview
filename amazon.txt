Solving Basic Calculator I, II, III on leetcode


/*
The Collatz Sequence is generated by repeating the following process for any number x:
If x1 is even -> x2 = x1 / 2
If x1 is odd  -> x2 = 3 * x1 + 1

The Collatz Conjecture says that if you repeat this sequence for any positive integer,
the sequence will eventually reach 1.

1
2 -> 1
3 -> 10 -> 5 -> 16 -> 8 -> 4 -> 2 -> 1
4 -> 2 -> 1
5 -> 16 -> 8 -> 4 -> 2 -> 1
6 -> 3 -> 10 -> 5 -> 16 -> 8 -> 4 -> 2 -> 1
etc.

Your job is to write a function, that when given a positive integer, will find the
longest Collatz Sequence among the positive integers less than or equal to the
provided max, then return back that sequence's starting number and length.

For instance, if we provided the integer 5, the longest Collatz Sequence comes from 3 
(as you can see in the sequence demonstrations above), so the returned values should 
be 3 (the number with the longest sequence), and 8 (the length of that sequence).  If
we provide 6, we would expect the result to be 6, 9.

As always, the initial focus of this problem should be to get a working algorithm, but
keep in mind that you will be asked to optimize the number of computation steps
(time complexity) needed to solve this problem.
*/


Suppose that we want to create a simple recommendation based on items that are frequently bought together. To achieve
this, we can use order data and find the top-5 most frequent pairs of items from an order. An item is only eligible
to be part of a frequent pair if it occurs “>= n” times across all orders.

```
Input: a list of orders containing items purchased together, n
Output: a list of frequent pairs of items

// input
[
  [1, 2, 3, 4, 5, 6, 7],
  [1, 2, 3, 4, 5, 6],
  [1, 2, 3, 4, 5],
  [1, 2, 3, 4],
  [1, 2, 3]
]
n = 4

// output
[(1,2), (1,3), (2,3), (2,4), (3,4)]
```