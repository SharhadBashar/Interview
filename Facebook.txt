Facebook.txt
Suppose we have some input data describing a graph of relationships between parents and children over multiple generations. The data is formatted as a list of (parent, child) pairs, where each individual is assigned a unique positive integer identifier.


// For example, in this diagram, 3 is a child of 1 and 2, and 5 is a child of 4:

// 1   2    4   15
//  \ /   / | \ /
//   3   5  8  9
//    \ / \     \
//     6   7    11

// Sample input/output (pseudodata):

// parentChildPairs = [
//     (1, 3), (2, 3), (3, 6), (5, 6), (15, 9),
//     (5, 7), (4, 5), (4, 8), (4, 9), (9, 11)
// ]


// Write a function that takes this data as input and returns two collections: one containing all individuals with zero known parents, and one containing all individuals with exactly one known parent.


// Output may be in any order:

// findNodesWithZeroAndOneParents(parentChildPairs) => [
//   [1, 2, 4, 15],       // Individuals with zero parents
//   [5, 7, 8, 11]        // Individuals with exactly one parent
// ]

class Solution{
  public static final int PARENT = 0;
  public static final int CHILD = 1;

  Set<Integer> zeroParent = new HashSet<>(); //[1, 2, 4, 15]
  Set<Integer> oneParent = new HashSet<>(); //[7, 5, 8, 11]
  Set<Integer> temp = new HashSet<>(); //[3, 6, 9]

  void findNodes(int [][] parentChildPairs) {
    for (int [] parentChildPair: parentChildPairs) {
      int parent = parentChildPair[PARENT]; //9
      int child = parentChildPair[CHILD]; // 11

      funcZeroParent(parent);
      funcOneParent(child);
    }
  }

  private void funcZeroParent(int parent) {
    if (temp.contains(parent) || oneParent.contains(parent) {
      zeroParent.remove(parent);
    }
    else {
      zeroParent.add(parent);
    }
  }

  private void funcOneParent(int child) {
    zeroParent.remove(child);
    boolean moreThanOne = !oneParent.add(child);
    if (moreThanOne) {
      oneParent.remove(child);
      temp.add(child);
    }
  }

}

// write a function return true if two nodes have common ancestor
// hasCommonAncestor(parentChildPairs, 6, 11) —> true
// hasCommonAncestor(parentChildPairs, 3, 11) —> false


class Pair {
  int parent
  int child
}

public boolean hasCommonAncestor(int [][] arr, int node1, int node2) {
  List<Pair> pairs = new ArrayList<>();
  for(){
    Pair pair = new Pair(arr[i][0], arr[i][1])
    pairs.add(pair)
    node1Ans, node2Ans = lists
    addparentlist(node1Ans, pairs, node1)
    addparentlist(node2Ans, pairs, node2)

  }
}

addparentlist(List parents, pairs, node) {
  List<Pair> parentChild = pairs.stream().filter(pair -> pair.child == node && !parents.contains(pair.parent).collect();
  if (parentChild is empty) {return}
  parentChild.forEach(pair -> {
    parents.add(pair.parent);
    addparentlist(parent, pairs, pairs.parent);
  })
}


