Netsuite

Remove duplicates from a sorted array of int without using hash table.
  import static java.util.stream.IntStream.of;
  int[] array = of(scores).distinct().toArray();
    for (int i = 0; i < array.length; i++) {
        System.out.println(array[i]);
    }

Simple sql table join.
Tax question. Different amount of income pays different amount of tax. First 15k pays 5%, next 20 pays 10%, etc. Given an income M, return amount of tax
Reverse a list of int.
Testing a buggy website
commonly used data structures, complexity
1 Given a sorted array of integers, write a method to remove the duplicates. Do not use any classes from the java.util package, or the equivalent library for your language.
2. Given a non-negative real number a, its square root is a number x, such that x * x = a. One way to compute a square root is via successive approximation, where one estimate yields a better estimate.
3. SQL query
What is the computational complexity of searching in a dictionary implemented as a TreeMap?
Review time and space complexities, data structures.
Write a code or computer program for Fibonacci sequence. Give at least 6 ways on how you will test your program.
How to swap two integers without using a third variable?


var arr = [1, 2, 5, 3, 1, 2, 5, 12, 1, 5, 1];
var newArr = [];
//new array
for (var i = 0; i < arr.length; i++) {
  if(newArr.indexOf(arr[i]) === -1) {
    newArr.push(arr[i]);
  }
}
console.log(newArr);
//returns the old array
//O(n^2)
for (var i = 0; i < arr.length; i++) {
  for (var j = i + 1; j < arr.length; j++) {
    if (arr[i] === arr[j]) {
      arr.splice(j, 1);
    }
  }
}
console.log(arr);
//
arr.sort(function(a, b) {
  return a - b;
});
for (var i = 0; i < arr.length - 1; i++) {
  if (arr[i] === arr[i + 1]) {
    arr.splice(i, 1);
  }
}
console.log(arr);

/**
 * import java.util.*;
public class HelloWorld{

     public static void main(String []args){
        int[] arr = {1, 2, 5, 3, 1, 2, 5, 12, 1, 5, 1};
        ArrayList<Integer> newArr = new ArrayList<Integer>();
        //new arraylist
        for (int i = 0; i < arr.length; i++) {
            if (!newArr.contains(arr[i])) {
                newArr.add(arr[i]);
            }
        }
        System.out.println(newArr);
        //return the old array
        for (int i = 0; i < arr.length; i++) {
            for (int j = i + 1; i < arr.length; j++) {
                if (arr[i] == arr[j]) {
                    arr =
                }
            }
        }
        //Arrays.sort(arr);
        for (int i = 0; i < arr.length; i++) {
            System.out.println(arr[i]);
        }
     }
}
 */